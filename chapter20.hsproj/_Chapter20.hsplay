-- Haskell Playground 1.0
foldr (+) 0 [1, 2, 3, 4, 5]

mconcat [Sum 1, Sum 2, Sum 3, Sum 4, Sum 5]
fold [Sum 1, Sum 2, Sum 3, Sum 4, Sum 5]

foldMap Sum [1, 2, 3, 4]
foldMap Product [1, 2, 3, 4]

foldMap All [True, False, True]
foldMap Any [(3 == 4), (9 > 5)]

foldMap (*5) [1, 2, 3 :: Product Integer]
foldMap (*5) [1, 2, 3 :: Sum Integer]

foldMap (*5) [1, 2, 3 :: Product Integer]
foldMap (*5) [1, 2, 3 :: Sum Integer]

foldr (*) 5 [1, 2, 3]
foldr (*) 3 [1, 2, 3 :: Sum Integer]


foldMap (*5) (Just 100) :: Product Integer


foldMap (*5) (Just 100) :: Product Integer
foldMap (*5) (Just 5) :: Sum Integer


foldMap (*5) Nothing :: Sum Integer
foldMap (*5) Nothing :: Product Integer


foldr (*) 1 (Identity 5)
foldl (*) 5 (Identity 5)
foldMap (*5) (Identity 100) :: Product Integer


foldr (+) 1 Nothing
foldMap (+1) Nothing :: Sum Integer


foldr (+) 1 (Just 3)
foldMap (+1) $ Just 3 :: Sum Integer


map toList [Just 1, Just 2, Just 3]
concatMap toList [Just 1, Just 2, Just 3]
concatMap toList [Just 1, Just 2, Nothing]

null (Left 3)
null []

toList (1, 2)

null Nothing
null (1, 2)

fmap null [Just 1, Just 2, Nothing]


length (1, 2)
length [(1, 2), (3, 4), (5, 6)]
fmap length [(1, 2), (3, 4), (5, 6)]

fmap length Just [1, 2, 3]
fmap length [Just 1, Just 2, Nothing]

elem 2 (Just 3)
elem True (Left False)
elem True (Left True)
elem True (Right False)
elem True (Right True)

fmap (elem 3) [Right 1, Right 2, Right 3]

maximum [10, 12, 33, 5]

fmap maximum [Just 2, Just 10, Just 4]
fmap maximum (Just [3, 7, 10, 2])

minimum "julie"

fmap minimum (Just "julie")
fmap minimum [Just 'j', Just 'u', Just 'l']


sum (7, 5)
fmap sum [(7, 5), (3, 4)]
fmap sum (Just [1, 2, 3, 4, 5])

product Nothing
fmap product (Just [])
fmap product (Right [1, 2, 3])