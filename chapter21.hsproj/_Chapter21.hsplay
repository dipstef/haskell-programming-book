-- Haskell Playground 1.0
sum [1, 2, 3]


fmap sum [Just 1, Just 2, Just 3]
(fmap . fmap) sum Just [1, 2, 3]

fmap product [Just 1, Just 2, Nothing]

fmap Just [1, 2, 3]

sequenceA $ fmap Just [1, 2, 3]
sequenceA [Just 1, Just 2, Just 3]

sequenceA [Just 1, Just 2, Nothing]

fmap sum $ sequenceA [Just 1, Just 2, Just 3]


let xs = [Just 3, Just 4, Nothing]
fmap product (sequenceA xs)


catMaybes [Just 1, Just 2, Just 3]
catMaybes [Just 1, Just 2, Nothing]

let xs = [Just 1, Just 2, Just 3, Nothing]
sum $ catMaybes xs

fmap Just [1, 2, 3]
sequenceA $ fmap Just [1, 2, 3]
sequenceA . fmap Just $ [1, 2, 3]

traverse Just [1, 2, 3]

import Data.Functor.Identity

traverse (Identity . (+1)) [1, 2]
runIdentity $ traverse (Identity . (+1)) [1, 2]

let edgelordMap f t = runIdentity $ traverse (Identity . f) t
edgelordMap (+1) [1..5]

import Data.Monoid
import Data.Functor.Constant

let xs = [1, 2, 3, 4, 5] :: [Sum Integer]
traverse (Constant . (+1)) xs

let foldMap' f t = getConstant $ traverse (Constant . f) t
