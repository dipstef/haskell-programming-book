-- Haskell Playground 1.0
fmap (+1) [1, 2, 3]

pure (+1) <*> [1..3]


pure 1 :: [Int]
pure 1 :: Maybe Int

pure 1 :: Either a Int
pure 1 :: ([a], Int)


[(*2)] <*> [4, 5]
[(*2), (*3)] <*> [4, 5]
[(*2), (*3), (*6)] <*> [4, 5]

Just (*2) <*> Just 2
Just (*2) <*> Nothing
Nothing <*> Just 2
Nothing <*> Nothing

fmap (+1) ("blah", 0)
("Woo", (+1)) <*> (" Hoo!", 0)


(,) <$> [1, 2] <*> [3, 4]
-- other way
liftA2 (,) [1, 2] [3, 4]

(+) <$> [1, 2] <*> [3, 5]
liftA2 (+) [1, 2] [3, 5]

max <$> [1, 2] <*> [1, 4]
liftA2 max [1, 2] [1, 4]


lookup 3 [(3, "hello")]

fmap length $ lookup 3 [(3, "hello")]

let c (x:xs) = toUpper x:xs

fmap c $ lookup 3 [(3, "hello")]

f 3 
g 8

(++) <$> f 3 <*> g 7
(+) <$> h 5 <*> m 1
(+) <$> h 5 <*> m 6

liftA2 (++) (g 9) (f 4)
liftA2 (^) (h 5) (m 4)
liftA2 (*) (h 5) (m 4)
liftA2 (*) (h 1) (m 1)

const <$> [1, 2, 3] <*> [9, 9, 9]

import Data.Monoid

[1, 2, 3] <> [4, 5, 6]
