-- Haskell Playground 1.0
mappend [1, 2, 3] [4, 5, 6]

mconcat [[1..3], [4..6]]

mappend "Trout" " goes well with garlic"

(++) [1, 2, 3] [4, 5, 6]

(++) "Trout" " goes well with garlic"

foldr (++) [] [[1..3], [4..6]][1,2,3,4,5,6]


foldr mappend mempty [[1..3], [4..6]][1,2,3,4,5,6]

import Data.Monoid 

mappend (Sum 1) (Sum 5)
mappend mempty Sum 9

mappend (Sum 1) (mappend (Sum 2) (Sum 3))
mconcat [(Sum 8), (Sum 9), (Sum 10)]

getSum $ mappend (Sum 1) (Sum 1)

-- infixing the mappend function
(Sum 1) <> (Sum 1) <> (Sum 1)

mappend (Product 2) (Product 5)
mappend mempty(Product 5)

getProduct $ mappend (Product 5) (Product 5)

foldr mappend mempty ([2, 4, 6] :: [Product Int])
foldr mappend mempty ([2, 4, 6] :: [Sum Int])
mappend mempty ["blah", "woot"]

-- left identity
mappend mempty (Sum 1)
-- right identity
mappend (Sum 1) mempty

-- associativity
(Sum 1) <> (Sum 2 <> Sum 3)
(Sum 1 <> Sum 2) <> (Sum 3)

mconcat [Sum 1, Sum 2, Sum 3]
foldr mappend mempty [Sum 1, Sum 2, Sum 3]

-- mempty is []-- mappend is (++)

-- left identity
mappend mempty [1, 2, 3]
-- right identity
mappend [1, 2, 3] mempty

-- associativity
[1] <> ([2] <> [3])
([1] <> [2]) <> [3]

mconcat [[1], [2], [3]]
foldr mappend mempty [[1], [2], [3]]
concat [[1], [2], [3]]


All True
All True <> All False

Any True <> Any False
Any False <> Any False


First (Just 1) `mappend` First (Just 2)
Last (Just 1) `mappend` Last (Just 2)

Last Nothing `mappend` Last (Just 2)
First Nothing `mappend` First (Just 2)

First Nothing `mappend` First Nothing
Last Nothing `mappend` Last Nothing
